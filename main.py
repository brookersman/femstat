import random
import hashlib
import json
from datetime import datetime
from telegram import (
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    InlineQueryHandler,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
results = {}
leaderboard = []
fixed_uids = [1444745009]  # –í–µ—á–Ω—ã–µ —Ñ–µ–º–±–æ–∏
data_file = "data.json"


def datetime_to_str(dt):
    return dt.isoformat() if isinstance(dt, datetime) else dt


def str_to_datetime(dt_str):
    return datetime.fromisoformat(dt_str) if isinstance(dt_str, str) else dt_str


def load_data():
    global results, leaderboard
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
            results = {
                k: {**v, "timestamp": str_to_datetime(v["timestamp"])} for k, v in data["results"].items()
            }
            leaderboard = [
                {**entry, "timestamp": str_to_datetime(entry["timestamp"])}
                for entry in data["leaderboard"]
            ]
    except FileNotFoundError:
        results = {}
        leaderboard = []


def save_data():
    data = {
        "results": {
            k: {**v, "timestamp": datetime_to_str(v["timestamp"])} for k, v in results.items()
        },
        "leaderboard": [
            {**entry, "timestamp": datetime_to_str(entry["timestamp"])} for entry in leaderboard
        ],
    }
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def get_femboy_phrase(percent: int, user_id: int) -> str:
    if user_id in fixed_uids:
        return "–¢—ã –≤–µ—á–Ω—ã–π —Ñ–µ–º–±–æ–π! 100% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏, –∏ —ç—Ç–æ –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è! üåüüíñ"
    if percent == 100:
        return "–¢—ã —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ! –ß–∏—Å—Ç—ã–µ 100% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏, –Ω—è—à–∞ –∏–∑ –Ω—è—à! üå∏üíï"
    elif percent >= 80:
        return f"{percent}% —Ñ–µ–º–±–æ–π! –£—Ä–æ–≤–µ–Ω—å –º–∏–ª–æ—Ç—ã –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç! üòª"
    elif percent >= 50:
        return f"–£ —Ç–µ–±—è {percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏. –ü–æ—á—Ç–∏ –Ω—è—à–∞! ‚ú®"
    elif percent >= 20:
        return f"–¢–æ–ª—å–∫–æ {percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏... –ù–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∏—Ç—å—Å—è –±–æ–ª—å—à–µ–≥–æ! üí™"
    else:
        return f"–í—Å–µ–≥–æ {percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏. –≠—Ö, —ç—Ç–æ –Ω–µ —Ç–≤–æ—è —Ç–µ–º–∞, –Ω–æ –±—ã—Ç—å —Å–æ–±–æ–π ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ! üåü"


def update_leaderboard():
    global leaderboard
    leaderboard = sorted(
        [entry for entry in leaderboard if entry["user_id"] not in fixed_uids],
        key=lambda x: x["percent"],
        reverse=True,
    )[:5]


def calculate_femboy_percent(user_id: int, luck_factor: float = 1.0) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–µ–º–±–æ–π-–ø—Ä–æ—Ü–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º —É–¥–∞—á–∏.
    –®–∞–Ω—Å—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    base_chance = random.random()  # –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
    adjusted_chance = min(base_chance * luck_factor, 1.0)  # –£—á–∏—Ç—ã–≤–∞–µ–º —É–¥–∞—á—É (–º–∞–∫—Å. 1.3x)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —à–∞–Ω—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç
    if user_id in fixed_uids:
        percent = 100
    elif adjusted_chance < 0.5:
        percent = adjusted_chance * 50  # 0-50% —á–∞—â–µ
    else:
        percent = 50 + (adjusted_chance - 0.5) * 50  # 50-100% —Ä–µ–∂–µ

    return round(percent, 1)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º
def format_percent(percent: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º."""
    return f"{percent:.1f}%"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
def update_leaderboard():
    global leaderboard
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 5 –ø–æ–∑–∏—Ü–∏–π
    leaderboard = sorted(
        [entry for entry in leaderboard if entry['user_id'] not in fixed_uids],
        key=lambda x: x['percent'],
        reverse=True
    )[:5]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–∞
# Inline-–∑–∞–ø—Ä–æ—Å
async def inline_query(update: Update, context):
    query = update.inline_query
    if query is None:
        return

    try:
        user_id = query.from_user.id
        username = query.from_user.username or "Anonymous"
        now = datetime.now()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å —à–∞–Ω—Å–∞–º–∏ –∏ —É–¥–∞—á–µ–π
        luck_factor = 1.0 + random.uniform(0, 0.3)  # –£–¥–∞—á–∞ –æ—Ç 1.0 –¥–æ 1.3
        user_data = results.get(user_id, {'percent': 0, 'timestamp': now, 'attempts': 0, 'best_percent': 0})
        user_data['attempts'] += 1
        user_data['percent'] = calculate_femboy_percent(user_id, luck_factor)
        user_data['timestamp'] = now
        user_data['best_percent'] = max(user_data['best_percent'], user_data['percent'])
        results[user_id] = user_data

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        phrase = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {format_percent(user_data['percent'])}\n\n"
        phrase += get_femboy_phrase(user_data['percent'], user_id)
        phrase += f"\n\n–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {format_percent(user_data['best_percent'])}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        leaderboard_entry = next((entry for entry in leaderboard if entry['user_id'] == user_id), None)
        if leaderboard_entry:
            leaderboard_entry.update({'percent': user_data['percent'], 'timestamp': now})
        else:
            leaderboard.append({'user_id': user_id, 'username': username, 'percent': user_data['percent'], 'timestamp': now})

        update_leaderboard()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sorted_leaderboard = sorted(leaderboard, key=lambda x: x['percent'], reverse=True)
        user_position = next((idx + 1 for idx, entry in enumerate(sorted_leaderboard) if entry['user_id'] == user_id), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        phrase += f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: {user_position}"

        # Inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_id = hashlib.md5(f"{user_id}-{now}".encode()).hexdigest()
        result = InlineQueryResultArticle(
            id=result_id,
            title="–£–∑–Ω–∞–π —Å–≤–æ–π —Ñ–µ–º–±–æ–π-–ø—Ä–æ—Ü–µ–Ω—Ç!",
            input_message_content=InputTextMessageContent(phrase),
            description="–ö–∞–∫–æ–π —Ç—ã —Ñ–µ–º–±–æ–π? –£–∑–Ω–∞–π —Å–µ–π—á–∞—Å!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø", callback_data="leaderboard")]])
        )
        await query.answer([result], cache_time=0)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline-–∑–∞–ø—Ä–æ—Å–∞: {e}")


# –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API Telegram
async def get_username(bot, user_id):
    try:
        user = await bot.get_chat(user_id)
        return f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
    except Exception as e:
        return f"User{user_id}"  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
async def show_leaderboard(update: Update, context):
    query = update.callback_query

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    leaderboard_text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Ñ–µ–º–±–æ–µ–≤: üèÜ\n\n"
    for idx, entry in enumerate(leaderboard):
        leaderboard_text += f"{idx + 1}. @{entry['username']} - {entry['percent']}%\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ—á–Ω—ã—Ö —Ñ–µ–º–±–æ–µ–≤
    eternal_femboys = []
    for uid in fixed_uids:
        username = await get_username(context.bot, uid)
        eternal_femboys.append(username)

    if eternal_femboys:
        leaderboard_text += f"\n‚ú® –í–µ—á–Ω—ã–µ —Ñ–µ–º–±–æ–∏:\n" + "\n".join(eternal_femboys)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
    await query.answer(leaderboard_text, show_alert=True)

if __name__ == "__main__":
    load_data()

    app = Application.builder().token("7843135403:AAFzvWumgrO5GnQ18B0yuhjqZ4LppkmYFwc").build()

    app.add_handler(InlineQueryHandler(inline_query))
    app.add_handler(CallbackQueryHandler(show_leaderboard, pattern="leaderboard"))

    app.run_polling()
    save_data()

