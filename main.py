import random
import hashlib
import json
from datetime import datetime
from threading import Thread
from flask import Flask
from telegram import InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, InlineQueryHandler, CommandHandler, CallbackQueryHandler

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ===
results = {}  # user_id -> {'percent': 0, 'timestamp': datetime, 'attempts': 0, 'best_percent': 0, 'title': ''}
leaderboard = []  # [{user_id, username, percent, timestamp, title}]
fixed_uids = [1444745009]  # –í–µ—á–Ω—ã–µ —Ñ–µ–º–±–æ–∏
data_file = "data.json"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health checks ===
app = Flask('health_check')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Render

def run_health_server():
    app.run(host="0.0.0.0", port=5000)  # Flask —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5000

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ ===
def datetime_to_str(dt):
    return dt.isoformat() if isinstance(dt, datetime) else dt

def str_to_datetime(dt_str):
    return datetime.fromisoformat(dt_str) if isinstance(dt_str, str) else dt_str

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    global results, leaderboard
    try:
        with open(data_file, "r", encoding="utf-8") as f:
            data = json.load(f)
            results = {k: {**v, 'timestamp': str_to_datetime(v['timestamp'])} for k, v in data["results"].items()}
            leaderboard = [
                {**entry, 'timestamp': str_to_datetime(entry['timestamp'])}
                for entry in data["leaderboard"]
            ]
    except FileNotFoundError:
        results = {}
        leaderboard = []

def save_data():
    data = {
        "results": {
            k: {**v, 'timestamp': datetime_to_str(v['timestamp'])} for k, v in results.items()
        },
        "leaderboard": [
            {**entry, 'timestamp': datetime_to_str(entry['timestamp'])}
            for entry in leaderboard
        ]
    }
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑ ===
def get_femboy_phrase(percent: float, user_id: int) -> str:
    if user_id in fixed_uids:
        return "–¢—ã –≤–µ—á–Ω—ã–π —Ñ–µ–º–±–æ–π! 100% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏, –∏ —ç—Ç–æ –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è! üåüüíñ"
    if percent >= 90:
        return f"{percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω—è—à–∞ –∏–∑ –Ω—è—à! üå∏üíï"
    elif percent >= 70:
        return f"–£ —Ç–µ–±—è {percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏! –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ç–æ–ø—É! üòª"
    elif percent >= 50:
        return f"{percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏. –¢—ã –∏–¥–µ—à—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏! ‚ú®"
    elif percent >= 30:
        return f"–£ —Ç–µ–±—è {percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ! üí™"
    else:
        return f"{percent}% —Ñ–µ–º–±–æ–π–Ω–æ—Å—Ç–∏. –ù—É, –Ω–∏—á–µ–≥–æ, –±—ã—Ç—å —Å–æ–±–æ–π ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ! üåü"

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ===
def update_leaderboard():
    global leaderboard
    leaderboard = sorted([entry for entry in leaderboard if entry['user_id'] not in fixed_uids], key=lambda x: x['percent'], reverse=True)[:5]

# === Inline-–∑–∞–ø—Ä–æ—Å ===
def inline_query(update: Update, context):
    query = update.inline_query
    user_id = query.from_user.id
    username = query.from_user.username or "Anonymous"
    now = datetime.now()

    user_data = results.get(user_id, {'percent': 0, 'timestamp': now, 'attempts': 0, 'best_percent': 0})
    user_data['attempts'] += 1

    # –®–∞–Ω—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äì100 —Å –≤–µ—Å–æ–º –Ω–∞ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    luck_factor = min(1.3, 1 + (user_data['attempts'] / 100))
    percent = round(random.triangular(10, 90, 50) * luck_factor, 2)
    user_data['percent'] = percent
    user_data['timestamp'] = now
    user_data['best_percent'] = max(user_data['best_percent'], percent)
    results[user_id] = user_data

    phrase = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_data['percent']}%\n\n" + get_femboy_phrase(user_data['percent'], user_id)
    leaderboard_entry = next((entry for entry in leaderboard if entry['user_id'] == user_id), None)

    if leaderboard_entry:
        leaderboard_entry.update({'percent': percent, 'timestamp': now})
    else:
        leaderboard.append({'user_id': user_id, 'username': username, 'percent': percent, 'timestamp': now})

    update_leaderboard()

    result_id = hashlib.md5(f"{user_id}-{now}".encode()).hexdigest()
    result = InlineQueryResultArticle(
        id=result_id,
        title="–£–∑–Ω–∞–π —Å–≤–æ–π —Ñ–µ–º–±–æ–π-–ø—Ä–æ—Ü–µ–Ω—Ç!",
        input_message_content=InputTextMessageContent(phrase),
        description="–ö–∞–∫–æ–π —Ç—ã —Ñ–µ–º–±–æ–π? –£–∑–Ω–∞–π —Å–µ–π—á–∞—Å!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø", callback_data="leaderboard")]])
    )
    context.bot.answer_inline_query(query.id, [result], cache_time=0)

# === –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ ===
def show_leaderboard(update: Update, context):
    query = update.callback_query
    leaderboard_text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Ñ–µ–º–±–æ–µ–≤: üèÜ\n\n"
    for idx, entry in enumerate(leaderboard):
        leaderboard_text += f"{idx + 1}. @{entry['username']} - {entry['percent']}%\n"
    leaderboard_text += "\n‚ú® –í–µ—á–Ω—ã–µ —Ñ–µ–º–±–æ–∏:\n" + "\n".join([f"@User{uid}" for uid in fixed_uids])
    query.answer("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    query.edit_message_text(leaderboard_text)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ===
if __name__ == "__main__":
    load_data()

    # –ó–∞–ø—É—Å–∫ Flask health check
    server_thread = Thread(target=run_health_server)
    server_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater = Updater("–í–ê–®_–¢–û–ö–ï–ù").build()
    dispatcher = updater.dispatcher

    dispatcher.add_handler(InlineQueryHandler(inline_query))
    dispatcher.add_handler(CallbackQueryHandler(show_leaderboard, pattern="leaderboard"))

    updater.start_polling()
    updater.idle()

    save_data()
